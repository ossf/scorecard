// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ossf/scorecard/v4/clients/gitlabrepo (interfaces: TestMethods)

// Package moqs is a generated GoMock package.
package moqs

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gitlab "github.com/xanzy/go-gitlab"
)

// MockTestMethods is a mock of TestMethods interface.
type MockTestMethods struct {
	ctrl     *gomock.Controller
	recorder *MockTestMethodsMockRecorder
}

// MockTestMethodsMockRecorder is the mock recorder for MockTestMethods.
type MockTestMethodsMockRecorder struct {
	mock *MockTestMethods
}

// NewMockTestMethods creates a new mock instance.
func NewMockTestMethods(ctrl *gomock.Controller) *MockTestMethods {
	mock := &MockTestMethods{ctrl: ctrl}
	mock.recorder = &MockTestMethodsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestMethods) EXPECT() *MockTestMethodsMockRecorder {
	return m.recorder
}

// ListCommits mocks base method.
func (m *MockTestMethods) ListCommits() []*gitlab.Commit {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommits")
	ret0, _ := ret[0].([]*gitlab.Commit)
	return ret0
}

// ListCommits indicates an expected call of ListCommits.
func (mr *MockTestMethodsMockRecorder) ListCommits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommits", reflect.TypeOf((*MockTestMethods)(nil).ListCommits))
}

// ListMergeRequestsByCommit mocks base method.
func (m *MockTestMethods) ListMergeRequestsByCommit() []*gitlab.MergeRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMergeRequestsByCommit")
	ret0, _ := ret[0].([]*gitlab.MergeRequest)
	return ret0
}

// ListMergeRequestsByCommit indicates an expected call of ListMergeRequestsByCommit.
func (mr *MockTestMethodsMockRecorder) ListMergeRequestsByCommit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMergeRequestsByCommit", reflect.TypeOf((*MockTestMethods)(nil).ListMergeRequestsByCommit))
}

// QueryUsers mocks base method.
func (m *MockTestMethods) QueryUsers(arg0 string) []*gitlab.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryUsers", arg0)
	ret0, _ := ret[0].([]*gitlab.User)
	return ret0
}

// QueryUsers indicates an expected call of QueryUsers.
func (mr *MockTestMethodsMockRecorder) QueryUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryUsers", reflect.TypeOf((*MockTestMethods)(nil).QueryUsers), arg0)
}
