// Copyright 2024 OpenSSF Scorecard Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by MockGen. DO NOT EDIT.
// Source: internal/packageclient/depsdev.go

// Package mock_packageclient is a generated GoMock package.
package mockrepo

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	packageclient "github.com/ossf/scorecard/v5/internal/packageclient"
)

// MockProjectPackageClient is a mock of ProjectPackageClient interface.
type MockProjectPackageClient struct {
	ctrl     *gomock.Controller
	recorder *MockProjectPackageClientMockRecorder
}

// MockProjectPackageClientMockRecorder is the mock recorder for MockProjectPackageClient.
type MockProjectPackageClientMockRecorder struct {
	mock *MockProjectPackageClient
}

// NewMockProjectPackageClient creates a new mock instance.
func NewMockProjectPackageClient(ctrl *gomock.Controller) *MockProjectPackageClient {
	mock := &MockProjectPackageClient{ctrl: ctrl}
	mock.recorder = &MockProjectPackageClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectPackageClient) EXPECT() *MockProjectPackageClientMockRecorder {
	return m.recorder
}

// GetProjectPackageVersions mocks base method.
func (m *MockProjectPackageClient) GetProjectPackageVersions(ctx context.Context, host, project string) (*packageclient.ProjectPackageVersions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectPackageVersions", ctx, host, project)
	ret0, _ := ret[0].(*packageclient.ProjectPackageVersions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectPackageVersions indicates an expected call of GetProjectPackageVersions.
func (mr *MockProjectPackageClientMockRecorder) GetProjectPackageVersions(ctx, host, project interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectPackageVersions", reflect.TypeOf((*MockProjectPackageClient)(nil).GetProjectPackageVersions), ctx, host, project)
}
