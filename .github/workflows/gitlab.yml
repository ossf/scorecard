# Copyright 2023 OpenSSF Scorecard Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: gitlab-tests

permissions: read-all

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  GO_VERSION_FILE: go.mod # no good way of getting a mutual version between go.mod and tools/go.mod

jobs:
  gitlab-integration-trusted:
    runs-on: ubuntu-latest
    environment: gitlab
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@cba0d00b1fc9a034e1e642ea0f1103c282990604 # v2.5.0
        with:
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs
      - name: Clone the code
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }} # head SHA if PR, else fallback to push SHA
      - name: Setup Go
        uses: actions/setup-go@fac708d6674e30b6ba41289acaab6d4b75aa0753 # v4.0.1
        with:
          go-version-file: ${{ env.GO_VERSION_FILE }}
          check-latest: true
          cache: false # we manually manage caches below
      - id: go-cache-paths
        run: |
          echo "go-build=$(go env GOCACHE)" >> "$GITHUB_OUTPUT"
          echo "go-mod=$(go env GOMODCACHE)" >> "$GITHUB_OUTPUT"
      - name: Cache builds
        # https://github.com/mvdan/github-actions-golang#how-do-i-set-up-caching-between-builds
        uses: actions/cache@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 #v3.3.1
        with:
          path: |
            ${{ steps.go-cache-paths.outputs.go-build }}
            ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-tests-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-tests-

      - name: Prepare test env
        run: |
            go mod download

      - name: Run GitLab tokenless E2E
        uses: nick-invision/retry@943e742917ac94714d2f408a0e8320f2d1fcafcd # v2.8.3
        if: github.event_name == 'pull_request'
        with:
          max_attempts: 3
          retry_on: error
          timeout_minutes: 30
          command: make e2e-gitlab

      - name: Run GitLab PAT E2E  # skip if auth token is not available
        uses: nick-invision/retry@943e742917ac94714d2f408a0e8320f2d1fcafcd # v2.8.3
        if: ${{ github.event_name == 'push' && github.actor != 'dependabot[bot]' }}
        env:
          GITLAB_AUTH_TOKEN: ${{ secrets.GITLAB_TOKEN }}
        with:
          max_attempts: 3
          retry_on: error
          timeout_minutes: 30
          command: make e2e-gitlab-token

      - name: codecov
        uses: codecov/codecov-action@eaaf4bedf32dbdc6b720b63067d99c4d77d6047d # 3.1.4
        with:
         files: "*e2e-coverage.out"
         verbose: true
